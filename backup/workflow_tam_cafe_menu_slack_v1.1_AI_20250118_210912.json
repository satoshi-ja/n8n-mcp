{
  "name": "tam版_カフェメニューをslackに自動投稿 v1.1 AI動作版",
  "nodes": [
    {
      "parameters": {
        "path": "cafe-menu-form-webhook",
        "formTitle": "カフェメニュー告知フォーム",
        "formDescription": "写真とメニュー名を入力するだけで、プロ級のカフェ告知が瞬時に完成！",
        "formFields": {
          "values": [
            {
              "fieldLabel": "メニュー名",
              "requiredField": true
            },
            {
              "fieldLabel": "カテゴリ",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "コーヒー ☕"
                  },
                  {
                    "option": "ドリンク🍹"
                  },
                  {
                    "option": "スイーツ 🧁"
                  },
                  {
                    "option": "ランチ🍝"
                  },
                  {
                    "option": "BAR🍺"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "写真",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".jpg,.jpeg,.png",
              "requiredField": true
            },
            {
              "fieldLabel": "場所",
              "requiredField": true
            },
            {
              "fieldLabel": "提供時間",
              "requiredField": true
            },
            {
              "fieldLabel": "特別な説明",
              "fieldType": "textarea",
              "requiredField": "={{ false }}"
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "3135039f-5fa5-422c-b8d6-6a0ada6645db",
      "name": "Form Trigger",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// デバッグ: すべてのバイナリデータを確認\nconsole.log('=== BINARY DATA DEBUG ===');\nconsole.log('Form Trigger binary:', $('Form Trigger').item.binary);\nconsole.log('Form Trigger binary keys:', $('Form Trigger').item.binary ? Object.keys($('Form Trigger').item.binary) : 'No binary');\nconsole.log('Input binary:', $input.item.binary);\nconsole.log('Input binary keys:', $input.item.binary ? Object.keys($input.item.binary) : 'No binary');\n\n// フォームデータの取得\nconst formData = $('Form Trigger').item.json;\n\n// 各ノードからデータを安全に取得（存在しない場合はデフォルト値を使用）\nlet imageAnalysis = \"美味しそうな料理の写真です。\";\nlet catchphrase = \"本日のおすすめメニュー\";\nlet description = \"ぜひお試しください。\";\n\n// 画像解析が有効な場合\ntry {\n  const imageAnalysisNode = $('画像解析 (Claude Vision)');\n  if (imageAnalysisNode && imageAnalysisNode.item && imageAnalysisNode.item.json) {\n    imageAnalysis = imageAnalysisNode.item.json.content[0].text;\n    console.log('画像解析取得成功');\n  }\n} catch (e) {\n  console.log('画像解析ノードが無効またはエラー:', e.message);\n}\n\n// キャッチフレーズ生成の結果を取得\ntry {\n  const catchphraseNode = $('キャッチフレーズ生成');\n  if (catchphraseNode && catchphraseNode.item && catchphraseNode.item.json) {\n    catchphrase = catchphraseNode.item.json.content[0].text;\n    console.log('キャッチフレーズ取得成功:', catchphrase);\n  }\n} catch (e) {\n  console.log('キャッチフレーズ生成ノードのエラー:', e.message);\n}\n\n// 説明文生成の結果を取得\ntry {\n  const descriptionNode = $('説明文生成');\n  if (descriptionNode && descriptionNode.item && descriptionNode.item.json) {\n    description = descriptionNode.item.json.content[0].text;\n    console.log('説明文取得成功');\n  }\n} catch (e) {\n  console.log('説明文生成ノードのエラー:', e.message);\n}\n\n// カテゴリに応じた装飾の選択\nlet decoration = {};\nswitch(formData.カテゴリ) {\n  case 'コーヒー ☕':\n    decoration = {\n      mainEmoji: '☕',\n      subEmojis: ['✨', '⭐'],\n      borderStyle: '━━━━━━━━━━━━━━━━━━━━'\n    };\n    break;\n  case 'ドリンク🍹':\n    decoration = {\n      mainEmoji: '🍹',\n      subEmojis: ['🌴', '🌊'],\n      borderStyle: '〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜'\n    };\n    break;\n  case 'スイーツ 🧁':\n    decoration = {\n      mainEmoji: '🧁',\n      subEmojis: ['🎉', '💕'],\n      borderStyle: '🌈 ═══════════════ 🌈'\n    };\n    break;\n  case 'ランチ🍝':\n    decoration = {\n      mainEmoji: '🍝',\n      subEmojis: ['🌿', '🥗'],\n      borderStyle: '◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆'\n    };\n    break;\n  case 'BAR🍺':\n    decoration = {\n      mainEmoji: '🍺',\n      subEmojis: ['🎆', '🌙'],\n      borderStyle: '★☆★☆★☆★☆★☆★☆★'\n    };\n    break;\n  default:\n    decoration = {\n      mainEmoji: '🍴',\n      subEmojis: ['✨', '⭐'],\n      borderStyle: '━━━━━━━━━━━━━━━━━━━━'\n    };\n}\n\n// 現在時刻の取得\nconst now = new Date();\nconst hours = now.getHours();\nlet timeGreeting = '';\nif (hours < 12) {\n  timeGreeting = 'おはようございます！朝の';\n} else if (hours < 17) {\n  timeGreeting = 'こんにちは！午後の';\n} else {\n  timeGreeting = 'お疲れ様です！夕方の';\n}\n\n// Slack投稿メッセージの組み立て (Slackのマークアップ形式)\nconst slackMessage = `\n┌─────────────────────┐\n│  ${decoration.mainEmoji} 本日のSpecial ${decoration.mainEmoji}  │\n└─────────────────────┘\n\n${decoration.subEmojis[0]} *${catchphrase}* ${decoration.subEmojis[0]}\n\n${description}\n\n${decoration.borderStyle}\n📍 場所: ${formData.場所}\n⏰ 提供時間: ${formData.提供時間}\n${decoration.borderStyle}\n\n🎯 ${timeGreeting}ひととき、\n${decoration.mainEmoji} でほっと一息つきませんか？\n\n#tam and co. #今日のオススメ #${formData.カテゴリ.replace(' ', '')}\n`;\n\n// Form Triggerから直接バイナリデータを取得\nconst originalBinary = $('Form Trigger').item.binary;\n\n// バイナリデータのキー名を統一（重要！）\nlet normalizedBinary = {};\nif (originalBinary && Object.keys(originalBinary).length > 0) {\n  const firstKey = Object.keys(originalBinary)[0];\n  console.log('Original binary key:', firstKey);\n  normalizedBinary = { data: originalBinary[firstKey] };\n} else if ($input.item.binary && Object.keys($input.item.binary).length > 0) {\n  const firstKey = Object.keys($input.item.binary)[0];\n  console.log('Input binary key:', firstKey);\n  normalizedBinary = { data: $input.item.binary[firstKey] };\n}\n\nconsole.log('Normalized binary:', normalizedBinary);\n\n// 結果を返す（バイナリデータも含める）\nreturn {\n  json: {\n    slackMessage: slackMessage,\n    menuName: formData.メニュー名,\n    category: formData.カテゴリ,\n    decoration: decoration\n  },\n  // バイナリデータを'data'というキー名で確実に渡す\n  binary: normalizedBinary\n};"
      },
      "id": "15e1cc30-a548-4ea0-83a8-d9d810a828cd",
      "name": "Slack投稿構築",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        0
      ]
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C096CHYL9U2",
          "mode": "list",
          "cachedResultName": "tam-and-co"
        },
        "text": "={{ $json.slackMessage }}",
        "otherOptions": {}
      },
      "id": "4f512acf-3abe-45e3-b438-b54fe1b1553c",
      "name": "Slack投稿",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        1200,
        0
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "options": {
          "channelId": "C096CHYL9U2"
        }
      },
      "id": "edd8519b-8b1d-43d6-bcb0-89a4a18ab6a5",
      "name": "写真アップロード",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        1200,
        208
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Credentialsから自動的にAPIキーを取得\nconst credentials = await this.getCredentials('anthropicApi');\nconst API_KEY = credentials.apiKey;\n\n// バイナリデータを取得\nlet imageData = null;\nlet binaryObj = null;\n\n// $input.item.binaryから取得\nif ($input.item && $input.item.binary) {\n  binaryObj = $input.item.binary;\n  const keys = Object.keys(binaryObj);\n  console.log('Binary keys:', keys);\n\n  if (keys.length > 0) {\n    const firstKey = keys[0];\n    if (binaryObj[firstKey] && binaryObj[firstKey].data) {\n      imageData = binaryObj[firstKey].data;\n      console.log(`Using binary data from key: ${firstKey}`);\n    }\n  }\n}\n\nif (!imageData) {\n  throw new Error('画像データが見つかりません');\n}\n\n// APIリクエストのボディを作成\nconst requestBody = {\n  model: \"claude-3-5-sonnet-20241022\",\n  max_tokens: 300,\n  messages: [\n    {\n      role: \"user\",\n      content: [\n        {\n          type: \"text\",\n          text: \"この画像を見て、料理や飲み物の特徴を詳しく説明してください。色合い、盛り付け、雰囲気などを含めて、魅力的に描写してください。\"\n        },\n        {\n          type: \"image\",\n          source: {\n            type: \"base64\",\n            media_type: \"image/jpeg\",\n            data: imageData\n          }\n        }\n      ]\n    }\n  ]\n};\n\n// this.helpers.requestを使用\ntry {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': API_KEY,\n      'anthropic-version': '2023-06-01'\n    },\n    body: JSON.stringify(requestBody)\n  };\n\n  const response = await this.helpers.request(\n    'https://api.anthropic.com/v1/messages',\n    options\n  );\n\n  // レスポンスをパース\n  const result = JSON.parse(response);\n\n  console.log('API response received');\n\n  // 結果を返す（バイナリデータも保持）\n  return {\n    json: result,\n    binary: binaryObj\n  };\n\n} catch (error) {\n  console.log('API Error:', error.message);\n  throw new Error(`画像解析エラー: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        336,
        224
      ],
      "id": "dde033f6-5926-42a0-931a-edcace3eea44",
      "name": "画像解析 (Claude Vision)"
    },
    {
      "parameters": {
        "jsCode": "// Credentialsから自動的にAPIキーを取得\nconst credentials = await this.getCredentials('anthropicApi');\nconst API_KEY = credentials.apiKey;\n\n// 前のノードから画像解析結果を取得\nconst imageAnalysis = $input.item.json.content[0].text;\n\n// Form Triggerからメニュー情報を取得\nconst formData = $('Form Trigger').item.json;\nconst menuName = formData.メニュー名;\nconst category = formData.カテゴリ;\n\n// プロンプトを作成\nconst prompt = `${menuName}という${category}の料理について、カフェの宣伝用に魅力的で短いキャッチフレーズを一つだけ作ってください。前置きや説明は不要で、キャッチフレーズのみを返してください。\\n\\n画像分析結果：${imageAnalysis}`;\n\n// APIリクエスト\nconst requestBody = {\n  model: \"claude-3-5-sonnet-20241022\",\n  max_tokens: 100,\n  messages: [\n    {\n      role: \"user\",\n      content: prompt\n    }\n  ]\n};\n\ntry {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': API_KEY,\n      'anthropic-version': '2023-06-01'\n    },\n    body: JSON.stringify(requestBody)\n  };\n\n  const response = await this.helpers.request(\n    'https://api.anthropic.com/v1/messages',\n    options\n  );\n\n  const result = JSON.parse(response);\n\n  console.log('キャッチフレーズ生成完了');\n\n  return {\n    json: result,\n    binary: $input.item.binary\n  };\n\n} catch (error) {\n  throw new Error(`キャッチフレーズ生成エラー: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        224
      ],
      "id": "8700a676-56c9-4631-9b5e-2ae644a7628e",
      "name": "キャッチフレーズ生成"
    },
    {
      "parameters": {
        "jsCode": "// Credentialsから自動的にAPIキーを取得\nconst credentials = await this.getCredentials('anthropicApi');\nconst API_KEY = credentials.apiKey;\n\n// 前のノードからキャッチフレーズを取得\nconst catchphrase = $input.item.json.content[0].text;\n\n// 画像解析結果を取得\nconst imageAnalysis = $('画像解析 (Claude Vision)').item.json.content[0].text;\n\n// Form Triggerからメニュー情報を取得\nconst formData = $('Form Trigger').item.json;\nconst menuName = formData.メニュー名;\nconst category = formData.カテゴリ;\nconst specialNote = formData.特別な説明 || '';\n\n// プロンプトを作成\nlet prompt = `カフェのSlack告知用に、${menuName}についての魅力的な説明文を2〜3文で作成してください。購買意欲をそそるような内容でお願いします。\\n\\nメニュー名：${menuName}\\nカテゴリ：${category}\\n画像分析：${imageAnalysis}\\nキャッチフレーズ：${catchphrase}`;\n\nif (specialNote) {\n  prompt += `\\n特別な説明：${specialNote}`;\n}\n\nprompt += '\\n\\n前置きや説明は不要で、説明文のみを返してください。';\n\n// APIリクエスト\nconst requestBody = {\n  model: \"claude-3-5-sonnet-20241022\",\n  max_tokens: 200,\n  messages: [\n    {\n      role: \"user\",\n      content: prompt\n    }\n  ]\n};\n\ntry {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': API_KEY,\n      'anthropic-version': '2023-06-01'\n    },\n    body: JSON.stringify(requestBody)\n  };\n\n  const response = await this.helpers.request(\n    'https://api.anthropic.com/v1/messages',\n    options\n  );\n\n  const result = JSON.parse(response);\n\n  console.log('説明文生成完了');\n\n  return {\n    json: result,\n    binary: $input.item.binary\n  };\n\n} catch (error) {\n  throw new Error(`説明文生成エラー: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        224
      ],
      "id": "d15ace68-4163-4ed6-8f59-748a66dc8d6f",
      "name": "説明文生成"
    }
  ],
  "connections": {
    "Form Trigger": {
      "main": [
        [
          {
            "node": "画像解析 (Claude Vision)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack投稿構築": {
      "main": [
        [
          {
            "node": "Slack投稿",
            "type": "main",
            "index": 0
          },
          {
            "node": "写真アップロード",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "画像解析 (Claude Vision)": {
      "main": [
        [
          {
            "node": "キャッチフレーズ生成",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "キャッチフレーズ生成": {
      "main": [
        [
          {
            "node": "説明文生成",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "説明文生成": {
      "main": [
        [
          {
            "node": "Slack投稿構築",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "instanceId": "backup_20250118_210912"
  }
}